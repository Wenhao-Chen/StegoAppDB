package app_analysis.oakland;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Set;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import apex.APEXApp;
import apex.bytecode_wrappers.APEXClass;
import apex.bytecode_wrappers.APEXMethod;
import apex.bytecode_wrappers.APEXStatement;
import apex.symbolic.Expression;
import apex.symbolic.MethodContext;
import apex.symbolic.VM;
import apex.symbolic.listeners.OpListener;
import ui.ProgressUI;
import util.F;
import util.Mailjet;
import util.P;

public class Malwares {

	static final File decodedDir = new File("F:\\VirusShare_Decoded");
	static final File apkDir = new File("F:\\VirusShare_Android_2018");
	static final File recordFile_readPixel = new File("F:\\record_apps_that_read_Bitmap.txt");
	
	static ProgressUI ui_app;
	static int count, total;
	static File currentAPK;
	
	static Set<String> readSigs = new HashSet<>(Arrays.asList(
			"Landroid/graphics/Bitmap;->getPixel(II)I",
			"Landroid/graphics/Bitmap;->getPixels([IIIIIII)V",
			"Landroid/graphics/Bitmap;->copyPixelsToBuffer(Ljava/nio/Buffer;)V"
			));
	
	public static void main(String[] args) {
		
		APEXApp.defaultDecodedDir = decodedDir;
		ui_app = ProgressUI.create("malware app");
		long time = System.currentTimeMillis();
		
		try {
			//analyzeBitmapRead();
			followBitmapReadVars();
		}
		catch (Exception e) {
			e.printStackTrace();
			time = (System.currentTimeMillis()-time)/1000;
			Mailjet.email("exception at app "+count+": "+currentAPK.getName()+". Exec time "+time+" seconds");
			System.exit(-1);
		}
		
		time = (System.currentTimeMillis()-time)/1000;
		P.p("All done. "+time+" seconds");
		Mailjet.email("malware done. "+time+"seconds");
	}
	
	static boolean printedApp;
	static int expIndex = 1;
	static void followBitmapReadVars() {
		List<String> apkNames = F.readLines(recordFile_readPixel);
		count = 1;
		total = apkNames.size();
		int numToSkip = 508;
		for (String apkName : apkNames) {
			File apk = new File(apkDir, apkName);
			if (ui_app != null) {
				ui_app.newLine(String.format("%d/%d: %s", count++, total, apkName));
			}
			if (!apk.exists() || !apk.getName().endsWith(".apk"))
				continue;
			if (numToSkip > 0) {
				numToSkip--;
				continue;
			}
			
			Runnable r = new Runnable() {
				@Override
				public void run() {
					APEXApp app = new APEXApp(apk);
					printedApp = false;
					// 1. find methods that read bitmap
					for (APEXClass c : app.getNonLibraryClasses())
					for (APEXMethod m : c.methods.values()) {
						boolean hasBitmapRead = false;
						for (APEXStatement s : m.statements) {
							if (s.isInvokeStmt() && readSigs.contains(s.getInvokeSignature())) {
								hasBitmapRead = true;
							}
						}
						if (!hasBitmapRead)
							continue;
						expIndex = 1;
						File dir = new File("C:\\Users\\C03223-Stego2\\Desktop\\malwares");
						// 2. for each method, do symbolic execution while watching variables
						VM.arithlogicListener = new OpListener() {
							@Override public void beforeOp(VM vm, MethodContext mc, APEXStatement s, List<String> inArgs, String outArg) {}
							@Override public void afterOp(VM vm, MethodContext mc, APEXStatement s, 
									List<String> inArgs, String outArg) {
								Expression exp = mc.read(outArg);
								if (exp != null && exp.related_to_pixel) {
									if (!printedApp) {
										P.p("--- "+apkName);
										printedApp = true;
									}
									P.pf("  [%s] %s\n", s.getOpcode(), exp.toStringRaw());
									String sig = m.getJavaMethodSig().replaceAll("<|>", "");
									if (sig.length()>200)
										sig = sig.substring(0, 200);
									exp.toDotGraph(sig+"_"+expIndex++, dir, false);
								}
							}
						};
						VM.timeLimit_seconds = 30;
						long time = System.currentTimeMillis();
						Queue<VM> q = new LinkedList<>();
						q.add(new VM(app, m));
						while (!q.isEmpty()) {
							long elapsed = (System.currentTimeMillis()-time)/1000;
							if (elapsed > 60*3) // 20 minutes limit for total run time
								break;
							VM vm = q.poll();
							vm.execute(true);
							q.addAll(vm.otherVMs);
						}
					}
					
				}
			};
			
			ExecutorService executor = Executors.newFixedThreadPool(1);
			Future<?> f = executor.submit(r);
			try {
				f.get(2, TimeUnit.MINUTES);
			}
			catch (InterruptedException | ExecutionException | TimeoutException e) {}
		}
	}

	/**
	 * Goes through the smali files and look for pattern:
	 *   invoke-virtual {...}, Landroib/graphics/Bitmap;->(getPixel...|getPixels...|copyPixelsToBuffer...
	 *   
	 * If there is such a call in the app, record the name in "F:\\record_apps_that_read_Bitmap.txt"
	 * The support pause/resuming, the variable "startsFrom" can be used to skip the first n apps.
	 * */
	static void analyzeBitmapRead() throws Exception{
		PrintWriter out_readPixel = F.initPrintWriter(recordFile_readPixel, true);
		
		File[] allDirs = decodedDir.listFiles();
		count = 1;
		total = allDirs.length;
		int startsFrom = 14240;
		main: for (File dir : allDirs) {
			currentAPK = dir;
			if (ui_app != null) {
				ui_app.newLine(String.format("%d/%d: %s", count++, total, dir.getName()));
			}
			if (count < startsFrom)
				continue;
			Queue<File> q = new LinkedList<>();
			File[] subDirs = dir.listFiles();
			if (subDirs != null) {
				for (File subDir : subDirs)
					if (subDir.getName().startsWith("smali"))
						q.add(subDir);
			}
			while (!q.isEmpty()) {
				File f = q.poll();
				if (f.isDirectory()) {
					File[] ff = f.listFiles();
					if (ff!=null) {
						for (File fff : ff)
							q.add(fff);
					}
				} else if (f.isFile()){
					if (f.getName().endsWith(".smali")) {
						String line;
						BufferedReader in = new BufferedReader(new FileReader(f));
						while ((line=in.readLine())!=null) {
							if (line.startsWith("    invoke-virtual")) {
								String sig = line.substring(line.indexOf("}, ")+3);
								if (readSigs.contains(sig)) {
									P.p("[read] "+dir.getName());
									out_readPixel.println(dir.getName());
									out_readPixel.flush();
									in.close();
									continue main;
								}
							}
						} 
						in.close();
					}
				}
			}
		}
		out_readPixel.close();
	}
	
	
}
